# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # before_script: 
  #   - apt update && apt -y install make autoconf 
  script: 
    - ls ./
    - ls /etc
    - ls /bin
    - ls /usr/bin
    - apt-get update
    - apt-cache search cmake
    - apt-get install -y cmake 
    - apt-get install -y 
    - apt-get install -y libboost-filesystem-dev libboost-program-options-dev libboost-system-dev
    - apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libswresample-dev
    - apt-get install -y libsdl2-dev libqt4-dev libopenal-dev libopenscenegraph-3.4-dev libmygui-dev libunshield-dev libtinyxml-dev
    - curl http://ftp.us.debian.org/debian/pool/main/b/bullet/libbullet-dev_2.87+dfsg-2_amd64.deb -o libbullet-dev_2.87+dfsg-2_amd64.deb
    - curl http://ftp.us.debian.org/debian/pool/main/b/bullet/libbullet2.87_2.87+dfsg-2_amd64.deb -o libbullet2.87_2.87+dfsg-2_amd64.deb
    - dpkg -i *.deb
    - mkdir build; cd build; cmake ../
    - make -j4
#  artifacts:
#    paths:
#      - mybinary
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
test:
  stage: test
  script:
    - ls
